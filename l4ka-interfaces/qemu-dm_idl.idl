/*********************************************************************
 *
 * Copyright (C) 2003-2004,  Karlsruhe University
 *
 * File path:	interfaces/qemu-dm_idl.idl
 * Description:	Interface definitions for the service locator.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 ********************************************************************/

import "l4/types.h";
#include "types.idl"


library IQEMU_DM
{
    const L4_Word_t EVENT_IO_REQUEST = 1;
    const L4_Word_t EVENT_SUSPEND_REQUEST = 2;
    const L4_Word_t EVENT_SELECT = 3;

    typedef L4_Word_t threadId_t;

    typedef L4_Word_t event_t;

    typedef struct
    {
	L4_Word16_t major;
	L4_Word16_t minor;
    } devid_t;

    typedef L4_Word_t size_t;

    exception invalid_ioreq_data {};
    exception invalid_threadId {};
    exception invalid_event {};


    [uuid(UUID_IQEMU_DM)] interface Control
    {
	[uuid(1)] void
	register( [in] threadId_t qemu_pager, [in] threadId_t irq_server)
		raises( invalid_threadId );

	[uuid(2)] void
	raiseEvent( [in] event_t event)
	raises( invalid_ioreq_data, invalid_event );

    };

};

