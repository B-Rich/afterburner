/*********************************************************************
 *
 * Copyright (C) 2003-2004,  Karlsruhe University
 *
 * File path:     interfaces/accounting_idl.idl
 * Description:   
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 ********************************************************************/

import "l4/types.h";
#include "types.idl"

const int UUID_IEarm_Resource   = 10;
const int UUID_IEarm_Manager   = 11;
const int UUID_IEarm_EAS       = 12;

const int UUID_IEarm_ResCPU_Min	  = 0;
const int UUID_IEarm_ResCPU_Max	  = 15;
const int UUID_IEarm_ResDisk	  = 16;
const int UUID_IEarm_ResMax	  = 17;


library IEarm
{
    typedef L4_Word64_t energy_t;
    typedef L4_Word_t power_t;

    typedef struct {
	energy_t limit;
	energy_t base_cost[UUID_IEarm_ResMax];
	energy_t access_cost[UUID_IEarm_ResMax];
    } domain_info_t;

    typedef struct {
	domain_info_t clients[MAX_DOMAINS];
    } shared_t;
    
    
    [uuid(UUID_IEarm_Manager)]
	interface Manager
	{
	    exception invalid_guid_format {};
	    exception unknown_resource {};

	    void register_resource([in] guid_t guid, [out] fpage *logfile);
	    void resource_request([in] guid_t guid, [in] L4_ThreadId_t client, [in] L4_Word_t client_space);

	    void budget_resource([in] guid_t guid, [in] L4_Word_t logid, [in] L4_Word_t budget);
	    
	    void open([in] guid_t guid, [out] L4_ThreadId_t *resource);

	    void close([in] guid_t guid);
	};
    
    [uuid(UUID_IEarm_Resource)]
	interface Resource
	{
	    exception invalid_client {};
	    // jsXXX: IDL4 seems to have problems with 64-bit values
	    void get_counter([out] L4_Word_t *hi, [out] L4_Word_t *lo);
            void get_client_info( [in] L4_Word_t client_space, [out] fpage *client_config, [out] fpage *server_config )
		raises( invalid_client);
            void resource_response([in] L4_ThreadId_t client, [in] L4_Word_t client_space);

	};

    
    
};
