-include config.out

SHELL=bash

Q ?= @
S ?= -s

.PHONY: all
all: start

cfg_common_dir :=  $(subst ",,$(cfg_common_dir))
cfg_build_dir :=   $(subst ",,$(cfg_build_dir))
cfg_src_dir :=     $(subst ",,$(cfg_src_dir))
cfg_usr_dir :=     $(subst ",,$(cfg_usr_dir))
cfg_boot_dir :=    $(subst ",,$(cfg_boot_dir))
cfg_archive_dir := $(subst ",,$(cfg_archive_dir))

interfaces_dir := $(afterburn_dir)/l4ka-interfaces
driver_reuse_dir := $(afterburn_dir)/l4ka-driver-reuse
driver_native_dir := $(afterburn_dir)/l4ka-driver-native
resourcemon_dir := $(afterburn_dir)/l4ka-resourcemon
wedge_apps_dir := $(afterburn_dir)/wedge-apps
asm_parser_dir := $(afterburn_dir)/asm-parser

ifeq ($(cfg_common_dir),.)
cfg_common_dir := $(CURDIR)
endif
ifneq ($(cfg_common_dir),)
cfg_build_dir := $(cfg_common_dir)/$(cfg_build_dir)
cfg_src_dir := $(cfg_common_dir)/$(cfg_src_dir)
cfg_usr_dir := $(cfg_common_dir)/$(cfg_usr_dir)
cfg_boot_dir := $(cfg_common_dir)/$(cfg_boot_dir)
cfg_archive_dir := $(cfg_common_dir)/$(cfg_archive_dir)
endif

PATH := $(cfg_usr_dir)/bin:$(PATH)
LD_LIBRARY_PATH := $(cfg_usr_dir)/lib:$(LD_LIBRARY_PATH)
export LD_LIBRARY_PATH

#GCC vars
ifeq "$(cfg_gcc)" "y"
CC=$(cfg_usr_dir)/bin/gcc
CXX=$(cfg_usr_dir)/bin/g++
CPP=$(cfg_usr_dir)/bin/cpp
else
ifeq "$(origin CC)" "default"
CC=gcc 
CXX=g++
CPP=cpp
endif
endif

NCCCOPTS   := CC=${CC} CXX=${CXX} CPP=${CPP}
NCMAKEOPTS := $(MAKEOPTS) $(NCCCOPTS)

ifndef NO_CCACHE
CCACHE?=	$(firstword $(shell type -p ccache))
CC:=		"$(CCACHE) $(CC)"
CXX:=		"$(CCACHE) $(CXX)"
endif

CCOPTS    =  CC=${CC} CXX=${CXX} CPP=${CPP}
MAKEOPTS  +=  ${CCOPTS}

##  Generate a valid configuration.
mk_dir := $(afterburn_dir)/Mk
include $(mk_dir)/Makefile.cml

##  Only include the remaining build logic if we have a valid configuration.
ifeq ($(cfg_cml),y)
include $(mk_dir)/Makefile.world
endif

##  By default, print the README.txt.
.PHONY: help start
help:
	@more $(afterburn_dir)/README.txt
	@touch Makefile.help
##  If necessary, generate a Makefile in the build directory, so that
##  the user only needs to execute 'make'.
ifeq ($(wildcard Makefile),)
start: Makefile
Makefile:
	@echo "include $(afterburn_dir)/Makefile" > Makefile
	@cp  $(afterburn_dir)/configs/sample-config.out config.out
	@echo "Your settings are now cached in Makefile"
else
ifeq ($(wildcard Makefile.help),)
start: help
else
start: world
endif
endif

